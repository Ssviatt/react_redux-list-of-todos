{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","query","initialFilter","input","statusSelect","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","selectTodo","selectItems","className","map","classNames","id","completed","title","onClick","userId","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoFilter","formItems","dispatch","inputChange","filterActions","onChange","e","status","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","TodoModal","selectUser","useState","user","setUser","useEffect","newTodo","find","el","currentTodoActions","href","email","name","App","allToodo","filterToodo","setFilterToodo","visibleToodo","setVisibleToodo","selectUserId","setSelectUserId","selectTodoId","setSelectTodoId","UserId","todoId","todoActions","handleSelect","toLocaleLowerCase","includes","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.feca9d2e.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Form } from '../types/Form';\n\ntype StatusSelectAction = { type: 'features/STATUS'; payload: string };\ntype InputAction = { type: 'features/QUERY'; payload: string };\ntype Action = StatusSelectAction | InputAction;\n\nexport const actions = {\n  statusSelect: (value: string): StatusSelectAction => {\n    return { type: 'features/STATUS', payload: value };\n  },\n  input: (query: string): InputAction => {\n    return { type: 'features/QUERY', payload: query };\n  },\n};\n\nconst initialFilter = {\n  input: '',\n  statusSelect: 'all',\n};\n\nconst filterReducer = (filter: Form = initialFilter, action: Action) => {\n  switch (action.type) {\n    case 'features/STATUS':\n      return { ...filter, statusSelect: action.payload };\n\n    case 'features/QUERY':\n      return { ...filter, input: action.payload };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'features/ADD'; payload: Todo[] };\n\nexport const actions = {\n  add: (todos: Todo[]): AddAction => ({ type: 'features/ADD', payload: todos }),\n};\n\nconst todosReducer = (todos: Todo[] = [], action: AddAction): Todo[] => {\n  switch (action.type) {\n    case 'features/ADD':\n      return [...todos, ...action.payload];\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: number,\n  selectItems: (UserId: number, todoId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectItems,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classNames({\n              'has-background-info-light': todo.id === selectTodo,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {todo.id !== selectTodo ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectItems(todo.userId, todo.id)}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const formItems = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const statusSelectChange = (status: string) => {\n    return dispatch(filterActions.statusSelect(status));\n  };\n\n  const inputChange = (query: string) => {\n    return dispatch(filterActions.input(query));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            className=\"statusSelect\"\n            value={formItems.statusSelect}\n            onChange={e => statusSelectChange(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={formItems.input}\n          onChange={e => inputChange(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {formItems.input && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => inputChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser, getTodos } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  selectUser: number\n  selectTodo: number,\n  selectItems: (UserId: number, todoId: number) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectUser,\n  selectTodo,\n  selectItems,\n}) => {\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<undefined | User>();\n  const todo = useAppSelector(state => state.currentTodo);\n  const setTodo = (newTodo: Todo | undefined) => {\n    if (!newTodo) {\n      return null;\n    }\n\n    return dispatch(currentTodoActions.setTodo(newTodo));\n  };\n\n  const deleteTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  const handleDelete = () => {\n    selectItems(0, 0);\n    deleteTodo();\n  };\n\n  useEffect(() => {\n    getUser(selectUser).then(res => setUser(res));\n    getTodos().then(res => setTodo(res.find(el => el.id === selectTodo)));\n  }, [selectUser]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleDelete}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={classNames({\n                'has-text-danger': !todo?.completed,\n                'has-text-success': todo?.completed,\n              })}\n              >\n                {todo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const allToodo = useAppSelector(state => state.todos);\n  const setAllToodo = (todos: Todo[]) => dispatch(todoActions.add(todos));\n  const formItems = useAppSelector(state => state.filter);\n\n  const [filterToodo, setFilterToodo] = useState(allToodo);\n  const [visibleToodo, setVisibleToodo] = useState(filterToodo);\n  const [selectUserId, setSelectUserId] = useState(0);\n  const [selectTodoId, setSelectTodoId] = useState(0);\n  const selectItems = (UserId: number, todoId: number) => {\n    setSelectUserId(UserId);\n    setSelectTodoId(todoId);\n  };\n\n  const handleSelect = () => {\n    switch (true) {\n      case formItems.statusSelect === 'active':\n        setFilterToodo(allToodo.filter(todo => !todo.completed));\n        break;\n\n      case formItems.statusSelect === 'completed':\n        setFilterToodo(allToodo.filter(todo => todo.completed));\n        break;\n\n      default:\n        setFilterToodo(allToodo);\n    }\n  };\n\n  const handleSearch = () => {\n    setVisibleToodo(filterToodo.filter(todo => todo.title.toLocaleLowerCase()\n      .includes(formItems.input.toLocaleLowerCase())));\n  };\n\n  useEffect(() => {\n    getTodos().then(res => setAllToodo(res));\n  }, []);\n\n  useEffect(() => {\n    handleSelect();\n  }, [formItems, allToodo]);\n\n  useEffect(() => {\n    handleSearch();\n  }, [filterToodo, formItems]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {allToodo.length !== 0 ? (\n                <TodoList\n                  todos={visibleToodo}\n                  selectTodo={selectTodoId}\n                  selectItems={selectItems}\n                />\n              ) : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectUserId && (\n        <TodoModal\n          selectUser={selectUserId}\n          selectTodo={selectTodoId}\n          selectItems={selectItems}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}